dat2
rm(dat2)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
dat2
?rnorm
dat <- matrix(rnorm(36, 3, 1), ncol=6)
dat
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
dat2
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
dat <- round(matrix(rnorm(36, 9, 1), ncol=6))
dat <- round(matrix(rnorm(36, 9, 1), ncol=6))
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
dat <- round(matrix(rnorm(36, 8, 4), ncol=6))
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
dat <- round(matrix(rnorm(36, 8, 3), ncol=6))
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low = "white", high = "red")
?sacle_fill_radient
?scale_fill_gradient
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient(low='blue', mid = "white", high = "red")
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red")
?scale_fill_gradient
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
dat[,1:3]*0.6
dat[,1:3]<-dat[,1:3]*0.6
dat
dat[,1:3]<-round(dat[,1:3]*0.6)
dat <- round(matrix(rnorm(36, 8, 3), ncol=6))
dat[,1:3]<-round(dat[,1:3]*0.6)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
dat
## make data
dat <- round(matrix(rnorm(36, 8, 3), ncol=6))
dat[1:3,]<-round(dat[1:3,]*0.6)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
library(limma)
normalizeQuantiles(dat)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
## reshape data (tidy/tall form)
dat2 <- dat.norm %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
dat.norm<-normalizeQuantiles(dat)
## reshape data (tidy/tall form)
dat2 <- dat.norm %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
dat
dat.norm
dat.norm<-normalizeQuantiles(t(dat))
## reshape data (tidy/tall form)
dat2 <- dat.norm %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
?ggsave
## make data
dat <- round(matrix(rnorm(36, 8, 3), ncol=6))
dat[1:3,]<-round(dat[1:3,]*0.6)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
dat.hmp<-ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
ggsave('raw.hmap.png', plot=dat.hmp, width=2, height=4)
ggsave('raw.hmap.png', plot=dat.hmp, width=2, height=3)
ggsave('raw.hmap.png', plot=dat.hmp, width=3, height=3)
ggsave('raw.hmap.png', plot=dat.hmp, width=4, height=3)
library(limma)
dat.norm<-normalizeQuantiles(t(dat))
## reshape data (tidy/tall form)
dat2 <- dat.norm %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:6),
Var2 = factor(gsub("V", "", Var2), levels=1:6)
)
## plot data
norm.hmap<=ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
ggsave('norm.hmap.png', plot=norm.hmap, width=4, height=3)
## plot data
norm.hmap<-ggplot(dat2, aes(Var1, Var2)) +
geom_tile(aes(fill = value)) +
geom_text(aes(label = round(value, 1))) +
scale_fill_gradient2(low='blue', mid = "white", high = "red", midpoint = 8)
ggsave('norm.hmap.png', plot=norm.hmap, width=4, height=3)
install.packages("deseq2")
install.packages("DESeq2")
install.packages("DESeq2")
source("http://bioconductor.org/biocLite.R")
dge_results
knitr::opts_chunk$set(echo = TRUE)
load('RNASeqData.Rdata')
head(count_data)
CONTROL=c("YEW1_Control", "YEW2_Control", "YEW3_Control")
TREATED=c("YEW4_Treated", "YEW5_Treated", "YEW6_Treated")
pca=prcomp(t(count_data))  # compute PCA
plot(pca$x[,1], pca$x[,2],
xlab='pc1', ylab='pc2')
points(pca$x[CONTROL,1], pca$x[CONTROL,2],
col="red", pch=18)
points(pca$x[TREATED,1], pca$x[TREATED,2],
col="blue", pch=18)
dist_matrix=dist(t(count_data), method="euclidean")
hctree=hclust(dist_matrix)
plot(hctree)
library(DESeq2)
condition <- factor(c("control", "control", "control",
"treated", "treated", "treated"))
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = DataFrame(condition),
design = ~condition)
dds <- DESeq(dds)
dge_results=results(dds, contrast=c("condition", "treated", "control"))
filtered_results=subset(dge_results, padj<0.001 & abs(log2FoldChange)>2)
norm_count <- counts(dds, normalized = T)
library(gplots)
DGE_matrix=norm_count[rownames(filtered_results),]
heatmap(DGE_matrix,col=colorpanel(50, 'blue', 'white', 'red'),
Rowv=TRUE, Colv=TRUE)
if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
BiocManager::install('EnhancedVolcano')
?BiocManager::install
dge_results
res1=dge_results
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
library(EnhancedVolcano)
res1=dge_results
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
res1
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
EnhancedVolcano(dge_results)
EnhancedVolcano(dge_results, x='log2FoldChange', y='padj')
res1=na.omit(dge_results)
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
a
plot(a)
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
ylim = c(0, 100)
a
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
ylim = c(0, 10)
a
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8))
ylim = c(0, 10)
a
res1=na.omit(dge_results)
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-16,
FCcutoff = 1.5,
transcriptPointSize = 1.5,
transcriptLabSize = 3.0
)
a
res1 <- lfcShrink(dds,
contrast = c("condition", "treated", "control"), res=res1)
dge_results=results(dds, contrast=c("condition", "treated", "control"))
res1 <- lfcShrink(dds,
contrast = c("condition", "treated", "control"), res=res1)
res1
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-16,
FCcutoff = 1.5,
transcriptPointSize = 1.5,
transcriptLabSize = 3.0
)
a
res1
rownames(res1)
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-10,
FCcutoff = 1.5
)
a
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-16,
FCcutoff = 1.5
)
a
a
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-16,
FCcutoff = 1.5
)
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 10),
pCutoff = 10e-16,
FCcutoff = 1.5
)
a
a
EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'pvalue',
xlim = c(-5, 8))
res1=na.omit(res1)
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
#pCutoff = 10e-16,
FCcutoff = 1.5
)
a
a=EnhancedVolcano(res1,
lab = rownames(res1),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 20),
#pCutoff = 10e-16,
FCcutoff = 1.5
)
a
a
library(BiocManager)
BiocManager::install('EnhancedVolcano', update=FALSE)
BiocManager::install('DESeq2', update=FALSE)
?lfcShrink
heatmap()
heatmap
knitr::opts_chunk$set(echo = TRUE)
load('RNASeqData.Rdata')   # Load data set which contains a variable called 'count_data'
head(count_data)           # The head(count_data) provides the first 6 row of the 'count_data'
CONTROL=c("YEW1_Control", "YEW2_Control", "YEW3_Control")
TREATED=c("YEW4_Treated", "YEW5_Treated", "YEW6_Treated")
pca=prcomp(t(count_data))        # compute PCA on transposed count_data
plot(pca$x[,1], pca$x[,2], xlab='pc1', ylab='pc2')
points(pca$x[CONTROL,1], pca$x[CONTROL,2],
col="red", pch=18)
points(pca$x[TREATED,1], pca$x[TREATED,2],
col="blue", pch=18)
# compute similarity matrix on the transposed count_data matrix using Euclidean distance
dist_matrix=dist(t(count_data), method="euclidean")
# compute hierarchical clustering tree and save it into variable called 'hctree'
hctree=hclust(dist_matrix)
# plot hctree
plot(hctree)
if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
if(!requireNamespace('DESeq2', quietly = TRUE))
BiocManager::install('DESeq2', update=FALSE)
library(DESeq2)
condition <- factor(c("control", "control", "control",
"treated", "treated", "treated"))
# This function generates model and set up contrast using linear model
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = DataFrame(condition),
design = ~condition)
# This function runs the model and save all model parameters and estimation into dds object
dds <- DESeq(dds)
# Returns DGE gene list results in data frame format
dge_results=results(dds, contrast=c("condition", "treated", "control"))
# make sure there is no missing values
dge_results=na.omit(dge_results)
# filter for results with padj<0.001 and absolute log2FoldChange>2
filtered_results=subset(dge_results, padj<0.001 & abs(log2FoldChange)>2)
# Obtain normalized count values
norm_count <- counts(dds, normalized = T)
# output filtered_results
filtered_results
library(gplots)
DGE_matrix=norm_count[rownames(filtered_results),]
heatmap(DGE_matrix,col=colorpanel(50, 'blue', 'white', 'red'),
Rowv=TRUE, Colv=TRUE)
if (!requireNamespace('EnhancedVolcano', quietly = TRUE))
BiocManager::install('EnhancedVolcano', update=FALSE)
library(EnhancedVolcano)
a=EnhancedVolcano(dge_results,
lab = rownames(dge_results),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 20),
#pCutoff = 10e-16,
FCcutoff = 1.5
)
a
a
library(DESeq2)
library(EnhancedVolcano)
a=EnhancedVolcano(dge_results,
lab = rownames(dge_results),
x = 'log2FoldChange',
y = 'padj',
xlim = c(-5, 8),
ylim = c(0, 20),
#pCutoff = 10e-16,
FCcutoff = 1.5
)
plot(a)
library(gplots)
DGE_matrix=norm_count[rownames(filtered_results),]
heatmap(DGE_matrix,col=colorpanel(50, 'blue', 'white', 'red'),
Rowv=TRUE, Colv=TRUE)
